// <auto-generated />
using System;
using AddressBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AddressBook.Migrations
{
    [DbContext(typeof(AddressBookDbContext))]
    partial class AddressBookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AddressBook.Models.Country", b =>
                {
                    b.Property<int>("countryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("countryId");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("AddressBook.Models.District", b =>
                {
                    b.Property<int>("districtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("districtName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("districtId");

                    b.HasIndex("DivisionId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("AddressBook.Models.Division", b =>
                {
                    b.Property<int>("divisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("divisionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("divisionId");

                    b.HasIndex("CountryId");

                    b.ToTable("divisions");
                });

            modelBuilder.Entity("AddressBook.Models.Person", b =>
                {
                    b.Property<int>("personId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.Property<int>("districtId")
                        .HasColumnType("int");

                    b.Property<int>("divisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("personName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("personPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("personPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("village")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("personId");

                    b.HasIndex("countryId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("AddressBook.Models.District", b =>
                {
                    b.HasOne("AddressBook.Models.Division", "division")
                        .WithMany("districts")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("division");
                });

            modelBuilder.Entity("AddressBook.Models.Division", b =>
                {
                    b.HasOne("AddressBook.Models.Country", "Country")
                        .WithMany("division")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AddressBook.Models.Person", b =>
                {
                    b.HasOne("AddressBook.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBook.Models.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBook.Models.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");

                    b.Navigation("district");

                    b.Navigation("division");
                });

            modelBuilder.Entity("AddressBook.Models.Country", b =>
                {
                    b.Navigation("division");
                });

            modelBuilder.Entity("AddressBook.Models.Division", b =>
                {
                    b.Navigation("districts");
                });
#pragma warning restore 612, 618
        }
    }
}
